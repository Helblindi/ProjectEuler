"""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However,
their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which
their sum and difference are pentagonal and D = |Pk − Pj|
is minimised; what is the value of D?
"""
import time


# driver function for our program
def main():
    """
    """
    start_time = time.time()
    last_pent_index = 500
    pentagonal_numbers = []
    minimum_distance = 999999
    for i in range(1, last_pent_index):
        num = (i*(3*i-1))/2
        print(num)
        pentagonal_numbers.append(num)

    for j in range(0, last_pent_index - 2):
        for k in range(j, last_pent_index - 1):
            num_j = pentagonal_numbers[j]
            num_k = pentagonal_numbers[k]
            difference = abs(num_j - num_k)
            if difference in pentagonal_numbers and \
                    num_j + num_k in pentagonal_numbers:
                if difference < minimum_distance:
                    minimum_distance = difference

    # calculate end time and print results
    end_time = time.time() - start_time
    print("Found %s in %2f seconds." % (minimum_distance, end_time))


# While not required, it is considered good practice to have
# a main function and use this syntax to call it.
if __name__ == "__main__":
    main()
